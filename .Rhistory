auc(roc(titanic_test, log_predict))
# fit to testing data
log_fit_test <- fit(log_wkflow, titanic_test)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
#install.packages("ggplot2")
#install.packages("tidyverse")
#install.packages("tidymodels")
#install.packages('yardstick')
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(yardstick)
library("corrr")
titanic <- read_csv("/Users/michellesack/Desktop/UCSB/Senior yr/Spring/PSTAT 131/homework-3/data/titanic.csv")
titanic$survived <- as.factor(titanic$survived)
titanic$pclass <- as.factor(titanic$pclass)
set.seed(2208)
titanic_split <- initial_split(titanic, prop = 0.80,
strata = survived)
titanic_train <- training(titanic_split)
titanic_test <- testing(titanic_split)
nrow(titanic_train)
nrow(titanic_test)
nrow(titanic)
titanic_train %>%
head()
titanic_survived <- titanic_train$survived
barplot(prop.table(table(titanic_survived)),  main= "Distribution of Survived", ylab= "Percent of Total Passengers")
# correlation matrix
titanic_df = as.data.frame(titanic_train[,sapply(titanic_train,is.numeric)])
cor_titanic_train <- titanic_df %>%
correlate()
rplot(cor_titanic_train)
# create a heatmap-style correlation plot
cor_titanic_train %>%
stretch() %>%
ggplot(aes(x, y, fill = r)) +
geom_tile() +
geom_text(aes(label = as.character(fashion(r))))
ggplot(titanic_train, aes(sib_sp, parch)) +
geom_boxplot() +
geom_jitter(alpha = 0.1) +
xlab("Number of Siblings") +
ylab("Number of Parents")
# create recipe
titanic_recipe <- recipe(survived ~ pclass + sex + age + sib_sp + parch + fare, data = titanic_train) %>%
step_impute_linear(age) %>%
step_dummy(all_nominal_predictors())
titanic_recipe
# interactions
interaction_1 <- step_interact(titanic_recipe, terms = ~ sex:fare)
interaction_1 <- prep(interaction_1, training = titanic_train)
interaction_2 <- step_interact(titanic_recipe, terms = ~ age:fare)
interaction_2 <- prep(interaction_2, training = titanic_train)
# specify the model type to be logistic regression and engine to be glm
log_reg_titanic <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
# set up the workflow and fit the model to the training data
log_wkflow <- workflow() %>%
add_model(log_reg_titanic) %>%
add_recipe(titanic_recipe)
log_fit <- fit(log_wkflow, titanic_train)
# specify the model type to be a linear discriminant analysis model and engine to be a 'MASS' engine
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
lda_wkflow <- workflow() %>%
add_model(lda_mod) %>%
add_recipe(titanic_recipe)
lda_fit <- fit(lda_wkflow, titanic_train)
# specify the model type to be a quadratic discriminant analysis model and engine to be a 'MASS' engine
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
qda_wkflow <- workflow() %>%
add_model(qda_mod) %>%
add_recipe(titanic_recipe)
qda_fit <- fit(qda_wkflow, titanic_train)
# specify the model type to be a naive Bayes model and engine to be a 'klaR' engine
nb_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
nb_wkflow <- workflow() %>%
add_model(nb_mod) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wkflow, titanic_train)
# prediction logistics regression
log_predict <- predict(log_fit, new_data = titanic_train, type = "prob")
# prediction linear discriminant
lda_predict <- predict(lda_fit, new_data = titanic_train, type = "prob")
# prediction quadratic discriminant
dqa_predict <- predict(qda_fit, new_data = titanic_train, type = "prob")
# prediction naive Bayes
nb_predict <- predict(nb_fit, new_data = titanic_train, type = "prob")
all_prediction <- bind_cols(log_predict, lda_predict, dqa_predict, nb_predict)
colnames(all_prediction) <- c("Log Pred No", "Log Pred Yes", "Lda Pred No", "Lda Pred Yes", "dqa Pred No", "dqa Pred Yes", "nb Pred No", "nb Pred Yes")
head(all_prediction)
# confidence matrix for logistics regression
augment(log_fit, new_data = titanic_train) %>%
conf_mat(truth = survived, estimate = .pred_class)
# confidence matrix for linear discriminant
augment(lda_fit, new_data = titanic_train) %>%
conf_mat(truth = survived, estimate = .pred_class)
# confidence matrix for quadratic discriminant
augment(qda_fit, new_data = titanic_train) %>%
conf_mat(truth = survived, estimate = .pred_class)
# confidence matrix for naive Bayes
augment(nb_fit, new_data = titanic_train) %>%
conf_mat(truth = survived, estimate = .pred_class)
# calculate accuracy of logistics regression
log_acc <- augment(log_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
# calculate accuracy of linear discriminant
lda_acc <- augment(lda_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
# calculate accuracy of quadratic discriminant
qda_acc <- augment(qda_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
# calculate accuracy of naive Bayes
nb_acc <- augment(nb_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
accuracies <- c(log_acc$.estimate, lda_acc$.estimate,
nb_acc$.estimate, qda_acc$.estimate)
models <- c("Logistic Regression", "LDA", "Naive Bayes", "QDA")
results <- tibble(models = models, accuracies = accuracies)
results %>%
arrange(-accuracies)
# fit to testing data
log_fit_test <- fit(log_wkflow, titanic_test)
# prediction logistics regression
log_predict <- predict(log_fit_test, new_data = titanic_test, type = "prob")
# calculate accuracy
log_acc_test <- augment(log_fit_test, new_data = titanic_test) %>%
accuracy(truth = survived, estimate = .pred_class)
log_acc_test
library(pROC)
augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
auc(roc(titanic_test, log_predict))
library(pROC)
augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
roc_obj <- roc(titanic_test, log_predict)
library(pROC)
augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
roc_obj <- roc(titanic_test, log_predict)
library(pROC)
augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
roc_obj <- roc_curve(titanic_test, log_predict)
library(pROC)
augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
roc_obj <- roc_curve(survived, .pred_No)
library(pROC)
ya <- augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
#autoplot()
plot(ya, print.auc=TRUE)
library(pROC)
ya <- augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No)
#autoplot()
plot(ya, print.auc=TRUE)
library(pROC)
ya <- augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No)
#autoplot()
plot(ya)
library(pROC)
ya <- augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
plot(ya, print.auc=TRUE)
library(pROC)
augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
data(aSAH)
# Syntax (response, predictor):
auc(titanic_test$survived, log_predict$.pred_No)
#install.packages("ggplot2")
#install.packages("tidyverse")
#install.packages("tidymodels")
#install.packages('yardstick')
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(yardstick)
library(corrr)
library(pROC)
augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
data(aSAH)
auc(titanic_test$survived, log_predict$.pred_No)
augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
auc(titanic_test$survived, log_predict$.pred_No)
augment(log_fit, new_data = titanic_train) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
auc(titanic_train$survived, log_predict$.pred_No)
# fit to testing data
log_fit_test <- fit(log_wkflow, titanic_test)
# prediction logistics regression
log_predict_test <- predict(log_fit_test, new_data = titanic_test, type = "prob")
# calculate accuracy
log_acc_test <- augment(log_fit_test, new_data = titanic_test) %>%
accuracy(truth = survived, estimate = .pred_class)
log_acc_test
# confusion matrix
augment(log_fit_test, new_data = titanic_test) %>%
conf_mat(truth = survived, estimate = .pred_class) %>%
autoplot(type = "heatmap")
augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
auc(titanic_test$survived, log_predict_test$.pred_No)
augment(log_fit, new_data = titanic_train) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
auc(titanic_train$survived, log_predict$.pred_No)
augment(log_fit, new_data = titanic_train) %>%
roc_curve(survived, Log Pred No) %>%
augment(log_fit, new_data = titanic_train) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
auc(titanic_train$survived, log_predict$.pred_No)
# prediction logistics regression
log_predict <- predict(log_fit, new_data = titanic_train, type = "prob")
# prediction linear discriminant
lda_predict <- predict(lda_fit, new_data = titanic_train, type = "prob")
# prediction quadratic discriminant
dqa_predict <- predict(qda_fit, new_data = titanic_train, type = "prob")
# prediction naive Bayes
nb_predict <- predict(nb_fit, new_data = titanic_train, type = "prob")
all_prediction <- bind_cols(log_predict, lda_predict, dqa_predict, nb_predict)
colnames(all_prediction) <- c("Log Pred No", "Log Pred Yes", "Lda Pred No", "Lda Pred Yes", "dqa Pred No", "dqa Pred Yes", "nb Pred No", "nb Pred Yes")
head(all_prediction)
# specify the model type to be logistic regression and engine to be glm
log_reg_titanic <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
# set up the workflow and fit the model to the training data
log_wkflow <- workflow() %>%
add_model(log_reg_titanic) %>%
add_recipe(titanic_recipe)
log_fit <- fit(log_wkflow, titanic_train)
# prediction logistics regression
log_predict <- predict(log_fit, new_data = titanic_train, type = "prob")
# prediction linear discriminant
lda_predict <- predict(lda_fit, new_data = titanic_train, type = "prob")
# prediction quadratic discriminant
dqa_predict <- predict(qda_fit, new_data = titanic_train, type = "prob")
# prediction naive Bayes
nb_predict <- predict(nb_fit, new_data = titanic_train, type = "prob")
all_prediction <- bind_cols(log_predict, lda_predict, dqa_predict, nb_predict)
colnames(all_prediction) <- c("Log Pred No", "Log Pred Yes", "Lda Pred No", "Lda Pred Yes", "dqa Pred No", "dqa Pred Yes", "nb Pred No", "nb Pred Yes")
head(all_prediction)
# calculate accuracy of logistics regression
log_acc <- augment(log_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
# calculate accuracy of linear discriminant
lda_acc <- augment(lda_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
# calculate accuracy of quadratic discriminant
qda_acc <- augment(qda_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
# calculate accuracy of naive Bayes
nb_acc <- augment(nb_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
accuracies <- c(log_acc$.estimate, lda_acc$.estimate,
nb_acc$.estimate, qda_acc$.estimate)
models <- c("Logistic Regression", "LDA", "Naive Bayes", "QDA")
results <- tibble(models = models, accuracies = accuracies)
results %>%
arrange(-accuracies)
augment(log_fit, new_data = titanic_train) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
auc(titanic_train$survived, log_predict$.pred_No)
# specify the model type to be a linear discriminant analysis model and engine to be a 'MASS' engine
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
lda_wkflow <- workflow() %>%
add_model(lda_mod) %>%
add_recipe(titanic_recipe)
lda_fit <- fit(lda_wkflow, titanic_train)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
#install.packages("ggplot2")
#install.packages("tidyverse")
#install.packages("tidymodels")
#install.packages('yardstick')
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(yardstick)
library(corrr)
library(pROC)
titanic <- read_csv("/Users/michellesack/Desktop/UCSB/Senior yr/Spring/PSTAT 131/homework-3/data/titanic.csv")
titanic$survived <- as.factor(titanic$survived)
titanic$pclass <- as.factor(titanic$pclass)
set.seed(2208)
titanic_split <- initial_split(titanic, prop = 0.80,
strata = survived)
titanic_train <- training(titanic_split)
titanic_test <- testing(titanic_split)
nrow(titanic_train)
nrow(titanic_test)
nrow(titanic)
titanic_train %>%
head()
titanic_survived <- titanic_train$survived
barplot(prop.table(table(titanic_survived)),  main= "Distribution of Survived", ylab= "Percent of Total Passengers")
# correlation matrix
titanic_df = as.data.frame(titanic_train[,sapply(titanic_train,is.numeric)])
cor_titanic_train <- titanic_df %>%
correlate()
rplot(cor_titanic_train)
# create a heatmap-style correlation plot
cor_titanic_train %>%
stretch() %>%
ggplot(aes(x, y, fill = r)) +
geom_tile() +
geom_text(aes(label = as.character(fashion(r))))
# create recipe
titanic_recipe <- recipe(survived ~ pclass + sex + age + sib_sp + parch + fare, data = titanic_train) %>%
step_impute_linear(age) %>%
step_dummy(all_nominal_predictors())
titanic_recipe
# interactions
interaction_1 <- step_interact(titanic_recipe, terms = ~ sex:fare)
interaction_1 <- prep(interaction_1, training = titanic_train)
interaction_2 <- step_interact(titanic_recipe, terms = ~ age:fare)
interaction_2 <- prep(interaction_2, training = titanic_train)
# specify the model type to be logistic regression and engine to be glm
log_reg_titanic <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
# set up the workflow and fit the model to the training data
log_wkflow <- workflow() %>%
add_model(log_reg_titanic) %>%
add_recipe(titanic_recipe)
log_fit <- fit(log_wkflow, titanic_train)
# specify the model type to be a linear discriminant analysis model and engine to be a 'MASS' engine
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
lda_wkflow <- workflow() %>%
add_model(lda_mod) %>%
add_recipe(titanic_recipe)
lda_fit <- fit(lda_wkflow, titanic_train)
# specify the model type to be a quadratic discriminant analysis model and engine to be a 'MASS' engine
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
qda_wkflow <- workflow() %>%
add_model(qda_mod) %>%
add_recipe(titanic_recipe)
qda_fit <- fit(qda_wkflow, titanic_train)
# specify the model type to be a naive Bayes model and engine to be a 'klaR' engine
nb_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
nb_wkflow <- workflow() %>%
add_model(nb_mod) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wkflow, titanic_train)
# prediction logistics regression
log_predict <- predict(log_fit, new_data = titanic_train, type = "prob")
# prediction linear discriminant
lda_predict <- predict(lda_fit, new_data = titanic_train, type = "prob")
# prediction quadratic discriminant
dqa_predict <- predict(qda_fit, new_data = titanic_train, type = "prob")
# prediction naive Bayes
nb_predict <- predict(nb_fit, new_data = titanic_train, type = "prob")
all_prediction <- bind_cols(log_predict, lda_predict, dqa_predict, nb_predict)
colnames(all_prediction) <- c("Log Pred No", "Log Pred Yes", "Lda Pred No", "Lda Pred Yes", "dqa Pred No", "dqa Pred Yes", "nb Pred No", "nb Pred Yes")
head(all_prediction)
# confidence matrix for logistics regression
augment(log_fit, new_data = titanic_train) %>%
conf_mat(truth = survived, estimate = .pred_class)
# confidence matrix for linear discriminant
augment(lda_fit, new_data = titanic_train) %>%
conf_mat(truth = survived, estimate = .pred_class)
# confidence matrix for quadratic discriminant
augment(qda_fit, new_data = titanic_train) %>%
conf_mat(truth = survived, estimate = .pred_class)
# confidence matrix for naive Bayes
augment(nb_fit, new_data = titanic_train) %>%
conf_mat(truth = survived, estimate = .pred_class)
# calculate accuracy of logistics regression
log_acc <- augment(log_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
# calculate accuracy of linear discriminant
lda_acc <- augment(lda_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
# calculate accuracy of quadratic discriminant
qda_acc <- augment(qda_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
# calculate accuracy of naive Bayes
nb_acc <- augment(nb_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
accuracies <- c(log_acc$.estimate, lda_acc$.estimate,
nb_acc$.estimate, qda_acc$.estimate)
models <- c("Logistic Regression", "LDA", "Naive Bayes", "QDA")
results <- tibble(models = models, accuracies = accuracies)
results %>%
arrange(-accuracies)
# fit to testing data
log_fit_test <- fit(log_wkflow, titanic_test)
# prediction logistics regression
log_predict_test <- predict(log_fit_test, new_data = titanic_test, type = "prob")
# calculate accuracy
log_acc_test <- augment(log_fit_test, new_data = titanic_test) %>%
accuracy(truth = survived, estimate = .pred_class)
log_acc_test
# confusion matrix
augment(log_fit_test, new_data = titanic_test) %>%
conf_mat(truth = survived, estimate = .pred_class) %>%
autoplot(type = "heatmap")
augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
auc(titanic_test$survived, log_predict_test$.pred_No)
# create recipe
titanic_recipe <- recipe(survived ~ pclass + sex + age + sib_sp + parch + fare, data = titanic_train) %>%
step_impute_linear(age) %>%
step_dummy(all_nominal_predictors())
titanic_recipe
# interactions
interaction_1 <- step_interact(titanic_recipe, terms = ~ sex:fare)
interaction_1 <- prep(interaction_1, training = titanic_train)
interaction_2 <- step_interact(titanic_recipe, terms = ~ age:fare)
interaction_2 <- prep(interaction_2, training = titanic_train)
# create recipe
titanic_recipe <- recipe(survived ~ pclass + sex + age + sib_sp + parch + fare, data = titanic_train) %>%
step_impute_linear(age) %>%
step_dummy(all_nominal_predictors())
titanic_recipe
# interactions
interaction_1 <- step_interact(titanic_recipe, terms = ~ sex:fare)
interaction_1 <- prep(interaction_1, training = titanic_train)
interaction_2 <- step_interact(titanic_recipe, terms = ~ age:fare)
interaction_2 <- prep(interaction_2, training = titanic_train)
augment(log_fit_test, new_data = titanic_test) %>%
roc_curve(survived, .pred_No) %>%
autoplot()
auc(titanic_test$survived, log_predict_test$.pred_No)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
# specify the model type to be a linear discriminant analysis model and engine to be a 'MASS' engine
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
# specify the model type to be a linear discriminant analysis model and engine to be a 'MASS' engine
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
#install.packages("ggplot2")
#install.packages("tidyverse")
#install.packages("tidymodels")
#install.packages('yardstick')
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(yardstick)
library(corrr)
library(pROC)
#install.packages("ggplot2")
#install.packages("tidyverse")
#install.packages("tidymodels")
#install.packages('yardstick')
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(yardstick)
library(corrr)
library(pROC)
library(ISLR) # For the Smarket data set
library(ISLR2) # For the Bikeshare data set
library(discrim)
library(poissonreg)
library(klaR) # for naive bayes
tidymodels_prefer()
# specify the model type to be a linear discriminant analysis model and engine to be a 'MASS' engine
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
lda_wkflow <- workflow() %>%
add_model(lda_mod) %>%
add_recipe(titanic_recipe)
lda_fit <- fit(lda_wkflow, titanic_train)

#ok